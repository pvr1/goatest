// Code generated by goa v3.5.4, DO NOT EDIT.
//
// hellosvc gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/pvr1/goatest/design

package client

import (
	"context"

	hellosvcpb "github.com/pvr1/goatest/gen/grpc/hellosvc/pb"
	hellosvc "github.com/pvr1/goatest/gen/hellosvc"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGreetFunc builds the remote method to invoke for "hellosvc" service
// "greet" endpoint.
func BuildGreetFunc(grpccli hellosvcpb.HellosvcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Greet(ctx, reqpb.(*hellosvcpb.GreetRequest), opts...)
		}
		return grpccli.Greet(ctx, &hellosvcpb.GreetRequest{}, opts...)
	}
}

// EncodeGreetRequest encodes requests sent to hellosvc greet endpoint.
func EncodeGreetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*hellosvc.GreetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("hellosvc", "greet", "*hellosvc.GreetPayload", v)
	}
	return NewGreetRequest(payload), nil
}

// DecodeGreetResponse decodes responses from the hellosvc greet endpoint.
func DecodeGreetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*hellosvcpb.GreetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("hellosvc", "greet", "*hellosvcpb.GreetResponse", v)
	}
	res := NewGreetResult(message)
	return res, nil
}
