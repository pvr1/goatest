// Code generated by goa v3.5.4, DO NOT EDIT.
//
// hellosvc gRPC client
//
// Command:
// $ goa gen github.com/pvr1/goatest/design

package client

import (
	"context"

	hellosvcpb "github.com/pvr1/goatest/gen/grpc/hellosvc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli hellosvcpb.HellosvcClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the hellosvc service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: hellosvcpb.NewHellosvcClient(cc),
		opts:    opts,
	}
}

// Greet calls the "Greet" function in hellosvcpb.HellosvcClient interface.
func (c *Client) Greet() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGreetFunc(c.grpccli, c.opts...),
			EncodeGreetRequest,
			DecodeGreetResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
