// Code generated by goa v3.5.4, DO NOT EDIT.
//
// hellosvc gRPC server
//
// Command:
// $ goa gen github.com/pvr1/goatest/design

package server

import (
	"context"

	hellosvcpb "github.com/pvr1/goatest/gen/grpc/hellosvc/pb"
	hellosvc "github.com/pvr1/goatest/gen/hellosvc"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the hellosvcpb.HellosvcServer interface.
type Server struct {
	GreetH goagrpc.UnaryHandler
	hellosvcpb.UnimplementedHellosvcServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the hellosvc service endpoints.
func New(e *hellosvc.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GreetH: NewGreetHandler(e.Greet, uh),
	}
}

// NewGreetHandler creates a gRPC handler which serves the "hellosvc" service
// "greet" endpoint.
func NewGreetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGreetRequest, EncodeGreetResponse)
	}
	return h
}

// Greet implements the "Greet" method in hellosvcpb.HellosvcServer interface.
func (s *Server) Greet(ctx context.Context, message *hellosvcpb.GreetRequest) (*hellosvcpb.GreetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "greet")
	ctx = context.WithValue(ctx, goa.ServiceKey, "hellosvc")
	resp, err := s.GreetH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*hellosvcpb.GreetResponse), nil
}
